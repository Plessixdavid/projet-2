# coding : utf-8

import pygame


    # def switch_house(self):
    #     # charger la carte (tmx)
    #     tmx_data = pytmx.load_pygame("ressources/tmx_tsx/my_house.tmx")
    #     map_data = pyscroll.data.TiledMapData(tmx_data)
    #     map_layer = pyscroll.orthographic.BufferedRenderer(map_data, self.screen.get_size())
    #     map_layer.zoom = 2

    #     # definir une liste qui va stocker les rectangles de collision
    #     self.walls = []

    #     for obj in tmx_data.objects:
    #         if obj.type == "collision":
    #             self.walls.append(pygame.Rect(obj.x, obj.y, obj.width, obj.height))

    #     # dessiner le groupe de calques
    #     self.group = pyscroll.PyscrollGroup(map_layer=map_layer, default_layer=3)
    #     self.group.add(self.player)

    #     # definir le rect de collision pour sortir de la maison
    #     enter_house = tmx_data.get_object_by_name("exit_house")
    #     self.enter_house_rect = pygame.Rect(enter_house.x, enter_house.y, enter_house.width, enter_house.height)

    #     # recuperer le point de spawn dans la maison
    #     spawn_house_point = tmx_data.get_object_by_name("spawn_house")
    #     self.player.position[0] = spawn_house_point.x - 16
    #     self.player.position[1] = spawn_house_point.y - 32
            
    # def switch_world(self):
    #     # charger la carte (tmx)
    #     tmx_data = pytmx.load_pygame("ressources/tmx_tsx/carte.tmx")
    #     map_data = pyscroll.data.TiledMapData(tmx_data)
    #     map_layer = pyscroll.orthographic.BufferedRenderer(map_data, self.screen.get_size())
    #     map_layer.zoom = 2

    #     # definir une liste qui va stocker les rectangles de collision
    #     self.walls = []

    #     for obj in tmx_data.objects:
    #         if obj.type == "collision":
    #             self.walls.append(pygame.Rect(obj.x, obj.y, obj.width, obj.height))

    #     # dessiner le groupe de calques
    #     self.group = pyscroll.PyscrollGroup(map_layer=map_layer, default_layer=6)
    #     self.group.add(self.player)

    #     # definir le rect de collision pour entrer dans la maison
    #     enter_house = tmx_data.get_object_by_name("enter_house")
    #     self.enter_house_rect = pygame.Rect(enter_house.x, enter_house.y, enter_house.width, enter_house.height)

    #     # recuperer le point de spawn devant la maison
    #     spawn_house_point = tmx_data.get_object_by_name("spawn_house_exit")
    #     self.player.position[0] = spawn_house_point.x - 16
    #     self.player.position[1] = spawn_house_point.y


    # def update(self):
    #     self.group.update()
    #     self.map = "world"

    #     # verifier l'entrer dans la maison
    #     if self.map == "world" and self.player.feet.colliderect(self.enter_house_rect):
    #         self.switch_house()
    #         self.map = "house"

    #     # verifier la sortie de la maison
    #     if self.map == "house" and self.player.feet.colliderect(self.enter_house_rect):
    #         self.switch_world()
    #         self.map = "world"

    #     # verification des collision
    #     for sprite in self.group.sprites():
    #         if sprite.feet.collidelist(self.walls) > -1:
    #             self.player.move_back()
